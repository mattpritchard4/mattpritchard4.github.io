type imageLogo = {
  src: string,
  alt: string,
};

type proj = {
  title: string,
  client: string,
  logo: list(imageLogo),
  description: string,
};

let reactSrc = "/images/react.svg";
let reasonmlSrc = "/images/reasonml.png";
let gatsbyjsSrc = "/images/gatsby-icon.png";
let javascriptSrc = "/images/javascript.png";
let htmlSrc = "/images/html.png";
let cssSrc = "/images/css.jpg";
let rubySrc = "/images/1024px-Ruby_logo.svg.png";
let racketSrc = "/images/racket-logo.svg";
let bashSrc = "/images/terminal.png";
let webflowSrc = "/images/webflow.svg";
let imagemagickSrc = "/images/ImageMagick_logo.svg.png";
let phpSrc = "/images/php.png";
let jquerySrc = "/images/jquery-logo-vector-png-download-free-jquery-vector-logo-500.jpg";

let react = {src: reactSrc, alt: "React"};
let reasonml = {src: reasonmlSrc, alt: "ReasonML"};
let gatsbyjs = {src: gatsbyjsSrc, alt: "GatsbyJS"};
let javascript = {src: javascriptSrc, alt: "JavaScript"};
let html = {src: htmlSrc, alt: "HTML"};
let css = {src: cssSrc, alt: "CSS"};
let ruby = {src: rubySrc, alt: "Ruby"};
let racket = {src: racketSrc, alt: "Racket"};
let bash = {src: bashSrc, alt: "Bash"};
let webflow = {src: webflowSrc, alt: "Webflow"};
let imagemagick = {src: imagemagickSrc, alt: "ImageMagick"};
let php = {src: phpSrc, alt: "PHP"};
let jquery = {src: jquerySrc, alt: "jQuery"};

let project = [
  {
    title: "D3 NYC Agency Website",
    client: "D3 NYC",
    logo: [reasonml, react, gatsbyjs, javascript, html, css],
    description: "Managed the development team through a full site build. The website was built using GatsbyJS, a static site generator which makes use of React and GraphQL. The site has multiple pages and several stateful components. After recognizing the benefits of type systems in modern programming languages, I converted several of the React components to ReasonML (OCaml) and leveraged the BuckleScript compiler to generate type safe JavaScript code that works in tandem with the existing ReactJS codebase.",
  },
  {
    title: "Design and Code Automation",
    client: "Seeker",
    logo: [ruby, racket, bash, imagemagick, javascript, html, css],
    description: "Automated the generation of the Seeker pop-science daily newsletter. Utilizing Ruby's Mechanize gem to scrape the necessary assets from the web and leveraging Smartcrop.js in conjunction with ImageMagick to intelligently resize, overlay, and process assets, I was able to eliminate over 400 hours of manual design labor (more than $10k labor cost), annually.",
  },
  {
    title: "Email Automation",
    client: "Discovery Inc.",
    logo: [racket, html, css],
    description: "Using Racket and the library, Pollen, I created an automated templating system for generating HTML marketing email.  This system has been used to generate thousands of marketing emails in the last two years and dramatically reduced rendering issues and the amount of time needed to QA the end product. This eliminated over 500 hours of manual development equivalent to over $15k in labor costs.",
  },
  {
    title: "Jet Blog",
    client: "Jet.com",
    logo: [php, jquery, javascript, html, css],
    description: "Built and maintained the front end of Jet.com's blog in late 2017 through mid 2018 using PHP, JavaScript, jQuery, HTML, and CSS on an enterprise level WordPress system (WordPress VIP). The site was implemented based off of Zeplin design documents generated by Jet's internal design team.",
  },
  {
    title: "Landing Pages",
    client: "MIT Tech Review",
    logo: [jquery, javascript, html, css],
    description: "Built custom landing pages using JavaScript, jQuery, HTML, and CSS. Design implemented from .psd files provided by the D3 NYC creative team.",
  },
  {
    title: "Site Build",
    client: "Spacious",
    logo: [webflow],
    description: "Implemented new front end designs for rebranded pages on Spacious.com using a felxible and powerful CMS: Webflow. Extensive use of CSS grid was used to ensure excellent responsive behavior on all devices and screen sizes.",
  },
];
